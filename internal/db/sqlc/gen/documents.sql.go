// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: documents.sql

package sqlc

import (
	"context"
)

const deleteDocumentSoft = `-- name: DeleteDocumentSoft :exec
;

UPDATE documents
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteDocumentSoft(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteDocumentSoft, id)
	return err
}

const findDocumentById = `-- name: FindDocumentById :one
;

SELECT id, contract_id, path, title, created_at, updated_at, deleted_at
FROM documents
WHERE id = ?
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindDocumentById(ctx context.Context, id int64) (Document, error) {
	row := q.db.QueryRowContext(ctx, findDocumentById, id)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Path,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const findDocumentsByContractId = `-- name: FindDocumentsByContractId :many
;

SELECT id, contract_id, path, title, created_at, updated_at, deleted_at
FROM documents
WHERE contract_id = ?
    AND deleted_at IS NULL
`

func (q *Queries) FindDocumentsByContractId(ctx context.Context, contractID int64) ([]Document, error) {
	rows, err := q.db.QueryContext(ctx, findDocumentsByContractId, contractID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Document
	for rows.Next() {
		var i Document
		if err := rows.Scan(
			&i.ID,
			&i.ContractID,
			&i.Path,
			&i.Title,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertDocument = `-- name: InsertDocument :one
INSERT INTO documents (created_at,
                       updated_at,
                       contract_id,
                       path,
                       title)
VALUES (CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        ?1,
        ?2,
        ?3) RETURNING id, contract_id, path, title, created_at, updated_at, deleted_at
`

type InsertDocumentParams struct {
	ContractID int64   `db:"contract_id"`
	Path       string  `db:"path"`
	Title      *string `db:"title"`
}

func (q *Queries) InsertDocument(ctx context.Context, arg InsertDocumentParams) (Document, error) {
	row := q.db.QueryRowContext(ctx, insertDocument, arg.ContractID, arg.Path, arg.Title)
	var i Document
	err := row.Scan(
		&i.ID,
		&i.ContractID,
		&i.Path,
		&i.Title,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateDocumentById = `-- name: UpdateDocumentById :exec
;

UPDATE documents
SET title = ?1,
    updated_at = CURRENT_TIMESTAMP
WHERE id = ?2
  AND deleted_at IS NULL
`

type UpdateDocumentByIdParams struct {
	Title *string `db:"title"`
	ID    int64   `db:"id"`
}

func (q *Queries) UpdateDocumentById(ctx context.Context, arg UpdateDocumentByIdParams) error {
	_, err := q.db.ExecContext(ctx, updateDocumentById, arg.Title, arg.ID)
	return err
}
