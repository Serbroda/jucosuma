// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"
)

const deleteUserSoft = `-- name: DeleteUserSoft :exec
UPDATE users
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteUserSoft(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUserSoft, id)
	return err
}

const findUserById = `-- name: FindUserById :one
;

SELECT id, name, created_at, updated_at, deleted_at
FROM users
WHERE id = ?
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertUser = `-- name: InsertUser :one
INSERT INTO users (created_at,
                   updated_at,
                   name)
VALUES (CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        ?1) RETURNING id, name, created_at, updated_at, deleted_at
`

func (q *Queries) InsertUser(ctx context.Context, name string) (User, error) {
	row := q.db.QueryRowContext(ctx, insertUser, name)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
