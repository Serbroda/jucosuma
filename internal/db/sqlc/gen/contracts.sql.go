// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: contracts.sql

package sqlc

import (
	"context"
)

const deleteContractSoft = `-- name: DeleteContractSoft :exec
;

UPDATE contracts
SET deleted_at = CURRENT_TIMESTAMP
WHERE id = ?
`

func (q *Queries) DeleteContractSoft(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteContractSoft, id)
	return err
}

const findAllContracts = `-- name: FindAllContracts :many
;

SELECT id, name, company, category, costs, icon_url, icon_source, created_at, updated_at, deleted_at
FROM contracts
WHERE deleted_at IS NULL
`

func (q *Queries) FindAllContracts(ctx context.Context) ([]Contract, error) {
	rows, err := q.db.QueryContext(ctx, findAllContracts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Contract
	for rows.Next() {
		var i Contract
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Company,
			&i.Category,
			&i.Costs,
			&i.IconUrl,
			&i.IconSource,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findContractById = `-- name: FindContractById :one
;

SELECT id, name, company, category, costs, icon_url, icon_source, created_at, updated_at, deleted_at
FROM contracts
WHERE id = ?
  AND deleted_at IS NULL LIMIT 1
`

func (q *Queries) FindContractById(ctx context.Context, id int64) (Contract, error) {
	row := q.db.QueryRowContext(ctx, findContractById, id)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.Category,
		&i.Costs,
		&i.IconUrl,
		&i.IconSource,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const insertContract = `-- name: InsertContract :one
INSERT INTO contracts (created_at,
                       updated_at,
                       name,
                       company,
                       category,
                       costs,
                       icon_source)
VALUES (CURRENT_TIMESTAMP,
        CURRENT_TIMESTAMP,
        LOWER(?1),
        LOWER(?2),
        LOWER(?3),
        LOWER(?4),
        LOWER(?5)) RETURNING id, name, company, category, costs, icon_url, icon_source, created_at, updated_at, deleted_at
`

type InsertContractParams struct {
	Name       string `db:"name" json:"name"`
	Company    string `db:"company" json:"company"`
	Category   string `db:"category" json:"category"`
	Costs      string `db:"costs" json:"costs"`
	IconSource string `db:"icon_source" json:"icon_source"`
}

func (q *Queries) InsertContract(ctx context.Context, arg InsertContractParams) (Contract, error) {
	row := q.db.QueryRowContext(ctx, insertContract,
		arg.Name,
		arg.Company,
		arg.Category,
		arg.Costs,
		arg.IconSource,
	)
	var i Contract
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Company,
		&i.Category,
		&i.Costs,
		&i.IconUrl,
		&i.IconSource,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
